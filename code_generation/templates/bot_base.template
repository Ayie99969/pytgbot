# -*- coding: utf-8 -*-
import json
import re
from abc import abstractmethod

from datetime import timedelta, datetime
from DictObject import DictObject

from luckydonaldUtils.logger import logging
from luckydonaldUtils.encoding import unicode_type, to_unicode as u, to_native as n
from luckydonaldUtils.exceptions import assert_type_or_raise

from ..exceptions import TgApiServerException, TgApiParseException
from ..exceptions import TgApiTypeError, TgApiResponseException
from ..api_types.sendable.inline import InlineQueryResult
from ..api_types.receivable.peer import User
from ..api_types import from_array_list
{% from "macros.template" import fix_type_docs, for_type_list_of_full, types_as_assert_tuple, for_args_set %}

__author__ = 'luckydonald'
__all__ = ["BotBase"]

logger = logging.getLogger(__name__)


DEFAULT_BASE_URL = "https://api.telegram.org/bot{api_key}/{command}"


class BotBase(object):
    def __init__(self, api_key, return_python_objects=True, base_url=DEFAULT_BASE_URL):
        """
        A Bot instance. From here you can call all the functions.
        The api key can be optained from @BotFather, see https://core.telegram.org/bots#6-botfather

        :param api_key: The API key. Something like "ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        :type  api_key: str

        :param return_python_objects: If it should convert the json to `pytgbot.api_types.**` objects. Default: `True`
        :type  return_python_objects: bool
        """
        if api_key is None or not api_key:
            raise ValueError("No api_key given.")
        # end if
        self.api_key = api_key
        self.return_python_objects = return_python_objects
        self._last_update = datetime.now()
        self._base_url = base_url
        self._me = None        # will be filled when using the property .id or .username, or when calling ._load_info()
    # end def __init__

    def _prepare_request(self, command, query):
        """
        Prepares the command url, and converts the query json.

        :param command: The Url command parameter
        :type  command: str

        :param query: Will get json encoded.

        :return: params and a url, for use with requests etc.
        """
        from ..api_types.sendable import Sendable
        from ..api_types import as_array
        import json

        params = {}
        for key in query.keys():
            element = query[key]
            if element is not None:
                if isinstance(element, (str, int, float, bool)):
                    params[key] = element
                else:
                    params[key] = json.dumps(as_array(element))
                # end if
            # end if
        # end for
        url = self._base_url.format(api_key=n(self.api_key), command=n(command))
        return url, params
    # end def _prepare_request

    def _postprocess_request(self, request, response, json):
        """
        This converts the response to either the response or a parsed :class:`pytgbot.api_types.receivable.Receivable`.

        :param request: the request
        :type request: request.Request|httpx.Request

        :param response: the request response
        :type  response: requests.Response|httpx.Response

        :param json: the parsed json array
        :type  json: dict

        :return: The json response from the server, or, if `self.return_python_objects` is `True`, a parsed return type.
        :rtype:  DictObject.DictObject | pytgbot.api_types.receivable.Receivable
        """
        from DictObject import DictObject

        try:
            logger.debug(json)
            res = DictObject.objectify(json)
        except Exception as e:
            raise TgApiResponseException('Parsing answer as json failed.', response, e)
        # end if
        # TG should always return an dict, with at least a status or something.
        if self.return_python_objects:
            if res.ok is not True:
                raise TgApiServerException(
                    error_code=res.error_code if "error_code" in res or hasattr(res, "error_code") else None,
                    response=response,
                    description=res.description if "description" in res or hasattr(res, "description") else None,
                    request=request
                )
            # end if not ok
            if "result" not in res:
                raise TgApiParseException('Key "result" is missing.')
            # end if no result
            return res.result
        # end if return_python_objects
        return res
    # end def _postprocess_request

    def _do_fileupload(self, file_param_name, value, _command=None, _file_is_optional=False, **kwargs):
        """
        :param file_param_name: For what field the file should be uploaded.
        :type  file_param_name: str

        :param value: File to send. You can either pass a file_id as String to resend a file
                      file that is already on the Telegram servers, or upload a new file,
                      specifying the file path as :class:`pytgbot.api_types.sendable.files.InputFile`.
                      If `_file_is_optional` is set to `True`, it can also be set to `None`.
        :type  value: pytgbot.api_types.sendable.files.InputFile | str | None

        :param _command: Overwrite the command to be send.
                         Default is to convert `file_param_name` to camel case (`"voice_note"` -> `"sendVoiceNote"`)
        :type  _command: str|None

        :param _file_is_optional: If the file (`value`) is allowed to be None.
        :type  _file_is_optional: bool

        :param kwargs: will get json encoded.

        :return: The json response from the server, or, if `self.return_python_objects` is `True`, a parsed return type.
        :rtype:  DictObject.DictObject | pytgbot.api_types.receivable.Receivable

        :raises TgApiTypeError, TgApiParseException, TgApiServerException: Everything from :meth:`Bot.do`, and :class:`TgApiTypeError`
        """
        from ..api_types.sendable.files import InputFile
        from luckydonaldUtils.encoding import unicode_type
        from luckydonaldUtils.encoding import to_native as n

        if value is None and _file_is_optional:
            # Is None but set optional, so do nothing.
            pass
        elif isinstance(value, str):
            kwargs[file_param_name] = str(value)
        elif isinstance(value, unicode_type):
            kwargs[file_param_name] = n(value)
        elif isinstance(value, InputFile):
            files = value.get_request_files(file_param_name)
            if "files" in kwargs and kwargs["files"]:
                # already are some files there, merge them.
                assert isinstance(kwargs["files"], dict), \
                    'The files should be of type dict, but are of type {}.'.format(type(kwargs["files"]))
                for key in files.keys():
                    assert key not in kwargs["files"], '{key} would be overwritten!'
                    kwargs["files"][key] = files[key]
                # end for
            else:
                # no files so far
                kwargs["files"] = files
            # end if
        else:
            raise TgApiTypeError("Parameter {key} is not type (str, {text_type}, {input_file_type}), but type {type}".format(
                key=file_param_name, type=type(value), input_file_type=InputFile, text_type=unicode_type))
        # end if
        if not _command:
            # command as camelCase  # "voice_note" -> "sendVoiceNote"  # https://stackoverflow.com/a/10984923/3423324
            command = re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), "send_" + file_param_name)
        else:
            command = _command
        # end def
        return self.do(command, **kwargs)
    # end def _do_fileupload

    def get_download_url(self, file):
        """
        Creates a url to download the file.

        Note: Contains the secret API key, so you should not share this url!

        :param file: The File you want to get the url to download.
        :type  file: pytgbot.api_types.receivable.media.File

        :return: url
        :rtype: str
        """
        from ..api_types.receivable.media import File
        assert_type_or_raise(file, File, parameter_name='file')
        return self._base_url.rstrip('/').format(api_key=n(elf.api_keys), command=n(file.file_path))
    # end def get_download_url

    @abstractmethod
    def _load_info(self):
        """
        This functions stores the id and the username of the bot.
        Called by `.username` and `.id` properties.
        Must be synchronous, even in asynchronous subclasses.
        :return:
        """
        raise NotImplementedError('subclass needs to overwrite this.')
    # end def

    @property
    def me(self):
        """
        :rtype: User
        """
        if not self._me:
            self._load_info()
        # end if
        return self._me
    # end def

    @property
    def username(self):
        return self.me.username
    # end def

    @property
    def id(self):
        return self.me.id
    # end def

    def __str__(self):
        return "{s.__class__.__name__}(username={s.username!r}, id={s.id!r})".format(s=self)
    # end def

    @abstractmethod
    def get_updates(self, offset=None, limit=100, poll_timeout=0, allowed_updates=None, request_timeout=None, delta=timedelta(milliseconds=100), error_as_empty=False):
        raise NotImplementedError('subclass needs to overwrite this.')
    # end def

    @abstractmethod
    def do(self, command, files=None, use_long_polling=False, request_timeout=None, **query):
        raise NotImplementedError('subclass needs to overwrite this.')
    # end def

    # start of generated functions
    {% for function in functions %}
    def _{{ function.name }}__make_request(self{% for variable in function.variables %}, {{ variable.name }}{% if variable.optional %}={{ variable.default if variable.default else 'None' }}{% endif %}{% endfor %}):
        """
        Internal function for making the request to the API's {{ function.api_name }} endpoint.

        {% if function.parameters %}
        Parameters:
        {% for param in function.parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
        {% endfor %}
        {% endif %}
        {% if function.keywords -%}
        Optional keyword parameters:
        {% for keyword in function.keywords %}
        :param {{ keyword.name }}: {{ keyword.description }}
        :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
        {% endfor %}
        {% endif -%}

        :return: the decoded json
        :rtype:  dict|list|bool
        """{#
        #}{% for import in function.imports %}
        from {{ import.path }} import {{ import.name }}{#
        #}{% endfor %}
        {% for variable in function.variables %}{#
        #}{% if variable.optional %}
        assert_type_or_raise({{ variable.name }}, None, {{ types_as_assert_tuple(variable) }}, parameter_name="{{ variable.name }}"){#
        #}{% else %}
        assert_type_or_raise({{ variable.name }}, {{ types_as_assert_tuple(variable) }}, parameter_name="{{ variable.name }}"){#
        #}{% endif %}{#
        #}{% if variable.always_is_value %}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if{#
        #}{% endif %}{#
        #}{% endfor %}
        return self.do("{{ function.api_name }}", {{ for_args_set(function.variables) }})
    # end def _{{ function.name }}__make_request

    def _{{ function.name }}__process_result(self, result):
        """
        Internal function for prosessing the json data returned by the API's {{ function.api_name }} endpoint.

        :return: {{ function.returns.description }}
        :rtype:  {{ for_type_list_of_full(function.returns) }}
        """
        if not self.return_python_objects:
            return result
        # end if

        logger.debug("Trying to parse {data}".format(data=repr(result)))
        {%- for import in function.returns.all_imports %}
        from {{ import.path }} import {{ import.name }}
        {%- endfor -%}
        {%- for type in function.returns.types if type.is_builtin == False %}
        try:
            {%- if type.is_list > 0 %}
            return {{ type.string }}.from_array_list(result, list_level={{ type.is_list }})
            {%- else %}
            return {{ type.string }}.from_array(result)
            {%- endif %}
        except TgApiParseException:
            logger.debug("Failed parsing as api_type {{ type.string }}", exc_info=True)
        # end try
        {% endfor -%}
        {%- for type in function.returns.types if type.is_builtin == True %}
        try:
            return from_array_list({{ type.string }}, result, list_level={{ type.is_list }}, is_builtin=True)
        except TgApiParseException:
            logger.debug("Failed parsing as primitive {{ type.string }}", exc_info=True)
        # end try
        {% endfor %}    # no valid parsing so far
        raise TgApiParseException("Could not parse result.")  # See debug log for details!
        # end if return_python_objects
        return result
    # end def _{{ function.name }}__process_result{#
    #}{% if not loop.last %}{# extra linebreak #}
    {% endif %}{#
    #}{% endfor %}
    # end of generated functions
# end class Bot
