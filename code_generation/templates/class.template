{% from "macros.template" import for_args_none, for_type_list_of_full, for_type_list_of, types_as_tuple, for_args_format_repr, for_args_keys, for_type -%}


{%- macro set_array_element(variable, var_type) -%}
{#-
    generates those

        array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)

    for a single type only
-#}
{%- if var_type.is_list > 0 -%}
array['{{ variable.api_name }}'] = self._as_array(self.{{ variable.name }})  # type {{ for_type_list_of(variable) }}
{% else -%}
{% if var_type.is_builtin -%}
{%- if var_type.string == 'str' -%}
array['{{ variable.api_name }}'] = u(self.{{ variable.name }})  # py2: type unicode, py3: type str
{% else -%}
array['{{ variable.api_name }}'] = {{ var_type.string }}(self.{{ variable.name }})  # type {{ var_type.string }}
{%- endif -%}
{% else -%}
array['{{ variable.api_name }}'] = self.{{ variable.name }}.to_array()  # type {{ var_type.string }}
{% endif -%}
{% endif -%}
{%- endmacro %}


{%- macro set_array(variable, class_name) -%}
{#
    Does the full

        array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)

    including having multiple types:

       if isinstance(self.xxx, type1):
            array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)
       elif isinstance(self.xxx, type2):
            array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)
       else:
            raise TypeError('Unknown type, must be one of type1, type2.')
       # end if

-#}
{%- if variable.types|length == 1 -%}
{{- set_array_element(variable, variable.types[0]) -}}{#
 #}{%- else -%}
{%- for var_type in variable.types -%}
{%- if not loop.first %}el{% endif %}if isinstance(self.{{ variable.name }}, {{ var_type.string }}):
    {{ set_array_element(variable, var_type) -}}
{%- endfor -%}
else:
    raise TypeError('Unknown type, must be one of {{ for_type(variable) }}.')
# end if
{% endif -%}
{%- endmacro %}

{%- macro set_data_array_element(variable, var_type, clazz, optional) -%}
{% if var_type.is_builtin -%}
        {% if var_type.string == 'str' -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ clazz.clazz }}._builtin_from_array_list(required_type=unicode_type, value=array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = u(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% else -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ clazz.clazz }}._builtin_from_array_list(required_type={{ var_type.string }}, value=array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = {{ var_type.string }}(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% endif -%}
        {% else -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ var_type.string }}.from_array_list(array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = {{ var_type.string }}.from_array(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% endif -%}
{%- endmacro -%}
{#- macros -#}
class {{ clazz.clazz -}}({{ clazz.parent_clazz.string }}):
    """
    {% block class_docstring -%}
    {{ clazz.description.strip()|indent }}

    {{clazz.link}}
    {# first line -#}
    {%- if clazz.parameters %}

    Parameters:
    {% for param in clazz.parameters %}
    :param {{ param.name }}: {{ param.description }}
    :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
    {% endfor -%}
    {%- endif -%}
    {#- {%- if clazz.keywords %} #}

    Optional keyword parameters:
    {% for keyword in clazz.keywords %}
    :param {{ keyword.name }}: {{ keyword.description }}
    :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
    {% endfor -%}{%- if not is_sendable %}
    :param _raw: Optional. Original data this object was generated from. Could be `None`.
    :type  _raw: None | dict
    {% endif -%}{%- endblock -%}
    """

    def __init__(self, {{ for_args_none(clazz.variables) }}{% if not is_sendable %}, _raw=None{% endif %}):
        """
        {{ self.class_docstring()|indent -}}
        """
        super({{ clazz.clazz }}, self).__init__()

        {%- block imports_block -%}
        {%- if clazz.imports %}
        {% for import in clazz.imports -%}
        from {{ import.path }} import {{ import.name }}
        {% endfor -%}
        {% endif -%}
        {%- endblock -%}
        {% for variable in clazz.variables -%}
        {% if variable.optional %}
        assert_type_or_raise({{ variable.name }}, None, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif -%}
        {%- else %}
        assert_type_or_raise({{ variable.name }}, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif %}
        {%- endif -%}
        self.{{ variable.name }} = {{ variable.name }}
        {%- if not loop.last %}
        {% endif -%}
        {% endfor %}{% if not is_sendable %}

        self._raw = _raw{% endif %}{# not is_sendable #}
    {# force line tabs -#}
    # end def __init__

    def to_array(self):
        """
        Serializes this {{ clazz.clazz }} to a dictionary.

        :return: dictionary representation of this object.
        :rtype: dict
        """
        array = super({{ clazz.clazz }}, self).to_array()
        {# fresh line #}
        {%- for variable in clazz.variables -%}
        {%- if variable.optional %}if self.{{ variable.name }} is not None:
            {{ set_array(variable)|indent(12) }}
        {% else -%}
        {{ set_array(variable)|indent(8) }}
        {% endif -%}
        {% endfor -%}
        return array
    # end def to_array

    @staticmethod
    def from_array(array):
        """
        Deserialize a new {{ clazz.clazz }} from a given dictionary.

        :return: new {{ clazz.clazz }} instance.
        :rtype: {{ clazz.clazz }}
        """
        if array is None or not array:
            return None
        # end if
        assert_type_or_raise(array, dict, parameter_name="array")
        {#- strip linebreak after #}
        {{- self.imports_block() -}}
        {#- does strip before #}

        data = {}
        {% for variable in clazz.variables -%}
        {% if variable.types|length == 1 -%}
        {{- set_data_array_element(variable, variable.types[0], clazz, variable.optional) -}}
        {% else -%}
        {%- for var_type in variable.types -%}
        {%- if not loop.first %}el{% endif %}if isinstance(array.get('{{ variable.api_name }}'), {{ var_type.string }}):
            {{ set_data_array_element(variable, var_type, clazz, False) -}}
        {%- endfor -%}
        {%- if variable.optional -%}
        elif array.get('{{ variable.api_name }}') is None:
            data['{{ variable.name }}'] = None
        {% endif -%}
        else:
            raise TypeError('Unknown type, must be one of {{ for_type(variable) }}{% if variable.optional %} or None{% endif %}.')
        # end if
        {% endif -%}
        {%- endfor -%}{%- if not is_sendable -%}
        data['_raw'] = array
        return {{ clazz.clazz }}(**data){% else %}
        instance = {{ clazz.clazz }}(**data)
        instance._raw = array
        return instance{% endif %}
    # end def from_array

    def __str__(self):
        """
        Implements `str({{ clazz.clazz|lower }}_instance)`
        """
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __str__

    def __repr__(self):
        """
        Implements `repr({{ clazz.clazz|lower }}_instance)`
        """
        if self._raw:
            return "{{ clazz.clazz }}.from_array({self._raw})".format(self=self)
        # end if
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __repr__

    def __contains__(self, key):
        """
        Implements `"key" in {{ clazz.clazz|lower }}_instance`
        """
        return key in [{{ for_args_keys(clazz.variables) }}] and hasattr(self, key) and getattr(self, key)
    # end def __contains__
# end class {{ clazz.clazz }}
