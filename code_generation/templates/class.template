{%- from "macros.template" import for_args_none, for_type_list_of_full, for_type_list_of, types_as_tuple -%}
{%- from "macros.template" import for_args_format_repr, for_args_keys, for_type -%}
{%- from "macros.template" import set_array, set_array_element, set_data_array_element -%}


class {{ clazz.clazz -}}({{ clazz.parent_clazz.string }}):
    {% set needs_space = False %}{% if clazz.description or clazz.link or clazz.parameters or clazz.keywords %}"""
    {% block class_docstring -%}
    {%- if clazz.description %}{{ clazz.description.strip()|indent }}{% endif %}{%- if clazz.description and clazz.link %}

    {% endif %}{% if clazz.link %}{{ clazz.link }}{% endif %}{%- if (clazz.description or clazz.link) and clazz.parameters %}
    {# first line -#}
    {% endif %}{%- if clazz.parameters %}

    Parameters:
    {% for param in clazz.parameters if not param.is_fixed_value %}
    :param {{ param.name }}: {{ param.description }}
    :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
    {% endfor -%}
    {%- endif -%}{# {%- if (clazz.description or clazz.link or clazz.parameters) and clazz.keywords %} #}
    {#- {%- if clazz.keywords %} #}

    Optional keyword parameters:
    {% for keyword in clazz.keywords if not keyword.is_fixed_value %}
    :param {{ keyword.name }}: {{ keyword.description }}
    :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
    {% endfor -%}{%- if not is_sendable %}
    :param _raw: Optional. Original data this object was generated from. Could be `None`.
    :type  _raw: None | dict
    {% endif -%}{%- endblock -%}
    """{% set needs_space = True %}{% endif %}{% if needs_space and (clazz.body and clazz.body.before != []) %}

    {% endif %}{% if clazz.body and clazz.body.before != None %}{% for line in clazz.body.before %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.init != []) %}

    {% endif %}{% if clazz.body and clazz.body.init != None %}{% for line in clazz.body.init %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}def __init__(self{%- for variable in clazz.variables if not variable.is_fixed_value %}, {{ variable.name }}{% if variable.optional %}={% if variable.default == None %}None{% else %}{{ variable.default if variable.default is string else fix_type_docs(variable.default) }}{% endif %}{% endif %}{%- endfor %}{% if not is_sendable %}, _raw=None{% endif %}):
        {% if clazz.description or clazz.link or clazz.parameters or clazz.keywords %}"""
        {{ self.class_docstring()|indent -}}
        """{% endif %}
        super({{ clazz.clazz }}, self).__init__({%- for variable in clazz.variables if variable.duplicate_of_parent %}{{ variable.value_to_set }}{% if not loop.last %}, {% endif %}{%- endfor %})

        {%- block imports_block -%}
        {%- if clazz.imports %}
        {% for import in clazz.imports if import.relative_import(base_path=clazz.import_path).path != '.' -%}
        {{ import.import_statement_from_file(clazz.import_path) }}
        {% endfor -%}
        {% endif -%}
        {%- endblock -%}
        {% for variable in clazz.variables %}{#
        #}{% if not variable.is_fixed_value and not variable.duplicate_of_parent %}{#
        #}{% if variable.optional %}
        assert_type_or_raise({{ variable.name }}, None, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}"){#
        #}{% if variable.always_is_value %}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if{#
        #}{% endif %}{#
        #}{% else %}
        assert_type_or_raise({{ variable.name }}, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}"){#
        #}{% if variable.always_is_value %}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if{#
        #}{% endif %}{#
        #}{% endif %}{#
        #}{% endif %}{#
        #}{% if variable.duplicate_of_parent %}
        # {{ variable.name.__repr__() }} is set by {{ clazz.parent_clazz.string }} base class{#
        #}{% else %}
        self.{{ variable.name }} = {{ variable.value_to_set }}{#
        #}{% endif %}{#
        #}{% if not loop.last %}{#
        #}{% endif %}{#
        #}{% endfor %}{% if not is_sendable %}

        self._raw = _raw{% endif %}{# not is_sendable #}
    {# force line tabs -#}
    # end def __init__{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.to_array != []) %}

    {% endif %}{% if clazz.body and clazz.body.to_array != None %}{% for line in clazz.body.to_array %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}def to_array(self):
        """
        Serializes this {{ clazz.clazz }} to a dictionary.

        :return: dictionary representation of this object.
        :rtype: dict
        """
        array = super({{ clazz.clazz }}, self).to_array()
        {% for variable in clazz.variables %}{#
        #}{% if variable.duplicate_of_parent %}
        # {{ variable.name.__repr__() }} given by superclass{#
        #}{% elif variable.optional %}
        if self.{{ variable.name }} is not None:
            {{ set_array(variable)|trim()|indent(12) }}
        # end if{#
        #}{% else %}
        {{ set_array(variable)|trim()|indent(8) }}{#
        #}{% endif %}{#
        #}{% endfor %}

        return array
    # end def to_array{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.validate_array != []) %}

    {% endif %}{% if clazz.body and clazz.body.validate_array != None %}{% for line in clazz.body.validate_array %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}@staticmethod
    def validate_array(array):
        """
        Builds a new array with valid values for the {{ clazz.clazz }} constructor.

        :return: new array with valid values
        :rtype: dict
        """
        assert_type_or_raise(array, dict, parameter_name="array"){#
        #}{{ self.imports_block() }}
        data = {{ clazz.parent_clazz.string }}.validate_array(array){#
        #}{% for variable in clazz.variables %}{#
        #}{% if variable.types|length == 1 %}
        {{ set_data_array_element(variable, variable.types[0], clazz.clazz, variable.optional) | trim() }}{#
        #}{% else %}{#
        #}{% if variable.optional %}
        if array.get('{{ variable.api_name }}') is None:
            data['{{ variable.name }}'] = None{#
        #}{% endif %}{#
        #}{% for var_type in variable.types %}
        {% if not loop.first or variable.optional %}el{% endif %}if isinstance(array.get('{{ variable.api_name }}'), {{ var_type.string }}):
            {{ set_data_array_element(variable, var_type, clazz.clazz, False) | trim() }}{#
        #}{% endfor %}
        else:
            raise TypeError('Unknown type, must be one of {{ for_type(variable) }}{% if variable.optional %} or None{% endif %}.')
        # end if{#
        #}{% endif %}{#
        #}{% endfor %}
        return data
    # end def validate_array{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.from_array != []) %}

    {% endif %}{% if clazz.body and clazz.body.from_array != None %}{% for line in clazz.body.from_array %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}@staticmethod
    def from_array(array):
        """
        Deserialize a new {{ clazz.clazz }} from a given dictionary.

        :return: new {{ clazz.clazz }} instance.
        :rtype: {{ clazz.clazz }}
        """
        if not array:  # None or {}
            return None
        # end if

        data = {{ clazz.clazz }}.validate_array(array)
        {% if not is_sendable -%}
        data['_raw'] = array
        return {{ clazz.clazz }}(**data){% else -%}
        instance = {{ clazz.clazz }}(**data)
        instance._raw = array
        return instance{% endif %}
    # end def from_array{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.str != []) %}

    {% endif %}{% if clazz.body and clazz.body.str != None %}{% for line in clazz.body.str %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}def __str__(self):
        """
        Implements `str({{ clazz.clazz|lower }}_instance)`
        """
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __str__{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.repr != []) %}

    {% endif %}{% if clazz.body and clazz.body.repr != None %}{% for line in clazz.body.repr %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}def __repr__(self):
        """
        Implements `repr({{ clazz.clazz|lower }}_instance)`
        """
        if self._raw:
            return "{{ clazz.clazz }}.from_array({self._raw})".format(self=self)
        # end if
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __repr__{% set needs_space = True %}{% endif %}{% if needs_space and (not clazz.body or clazz.body.contains != []) %}

    {% endif %}{% if clazz.body and clazz.body.contains != None %}{% for line in clazz.body.contains %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}def __contains__(self, key):
        """
        Implements `"key" in {{ clazz.clazz|lower }}_instance`
        """
        return (
            key in [{{ for_args_keys(clazz.variables) }}]
            and hasattr(self, key)
            and bool(getattr(self, key, None))
        )
    # end def __contains__{% set needs_space = True %}{% endif %}{% if needs_space and (clazz.body and clazz.body.after != []) %}

    {% endif %}{% if clazz.body and clazz.body.after != None %}{% for line in clazz.body.after %}{% set needs_space = True %}{% if not loop.first %}
    {% endif %}{{ line }}{% endfor %}{% else %}{#
    #}{% set needs_space = True %}{% endif %}
# end class {{ clazz.clazz }}
