{% from "macros.template" import for_args_none, for_type_list_of_full, types_as_assert_tuple, for_args_set %}
    def {{ function.name }}(self, {{ for_args_none(function.variables) }}):
        """
        {% block func_docstring -%}
        {{ function.description|indent(8) }}

        {{function.link}}

        {% if function.parameters %}
        Parameters:
        {% for param in function.parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
        {% endfor %}
        {% endif %}
        {% if function.keywords -%}
        Optional keyword parameters:
        {% for keyword in function.keywords %}
        :param {{ keyword.name }}: {{ keyword.description }}
        :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
        {% endfor %}
        {% endif -%}


        Returns:

        :return: {{ function.returns.description }}
        :rtype: {{ for_type_list_of_full(function.returns) }}
        {% endblock -%}
        """
        {% block imports_block -%}
        {%- for import in function.imports -%}
        from {{ import.path }} import {{ import.name }}
        {%- if loop.last %}
        {% endif %}
        {% endfor -%}
        {%- endblock %}

        {%- for variable in function.variables -%}
        {% if variable.optional -%}
        assert({{ variable.name }} is None or isinstance({{ variable.name }}, {{ types_as_assert_tuple(variable) }}))
        {% else -%}
        assert({{ variable.name }} is not None)
        assert(isinstance({{ variable.name }}, {{ types_as_assert_tuple(variable) }}))
        {% endif -%}
        {%- if variable.always_is_value -%}
        assert({{ variable.name }} == {{ variable.always_is_value }})
        {%- endif -%}
        {%- if not loop.last %}
        {% endif %}
        {%- endfor -%}
        {#  #}
        result = self.do("{{ function.api_name }}", {{ for_args_set(function.variables) }})
        if self.return_python_objects:
            logger.debug("Trying to parse {data}".format(data=repr(result)))
        {%- for import in function.returns.all_imports %}
            from {{ import.path }} import {{ import.name }}
        {%- endfor -%}
        {%- for type in function.returns.types if type.is_builtin == False %}
            try:
                {%- if type.is_list > 0 %}
                return {{ type.string }}.from_array_list(result, list_level={{ type.is_list }})
                {%- else %}
                return {{ type.string }}.from_array(result)
                {%- endif %}
            except TgApiParseException:
                logger.debug("Failed parsing as api_type {{ type.string }}", exc_info=True)
            # end try
        {% endfor -%}
        {%- for type in function.returns.types if type.is_builtin == True %}
            try:
                return from_array_list({{ type.string }}, result, list_level={{ type.is_list }}, is_builtin=True)
            except TgApiParseException:
                logger.debug("Failed parsing as primitive {{ type.string }}", exc_info=True)
            # end try
        {% endfor %}    # no valid parsing so far
            raise TgApiParseException("Could not parse result.")  # See debug log for details!
        # end if return_python_objects
        return result
    # end def {{ function.name }}
