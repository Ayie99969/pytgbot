# -*- coding: utf-8 -*-
import json
import re

from datetime import timedelta, datetime
from DictObject import DictObject
from luckydonaldUtils.logger import logging
from luckydonaldUtils.encoding import unicode_type, to_unicode as u, to_native as n
from luckydonaldUtils.exceptions import assert_type_or_raise

from ..exceptions import TgApiServerException, TgApiParseException
from ..exceptions import TgApiTypeError, TgApiResponseException
from ..exceptions import TgApiException

from ..api_types.sendable.inline import InlineQueryResult
from ..api_types import from_array_list

from .base import BotBase

{% if is_asyncio %}
# async imports
from async_property import async_property
from typing import Union, Optional, List, Any
from asyncio import sleep
import httpx
import httpx.exceptions{#
#}{% else %}
from ..api_types.sendable.files import InputFile

# sync imports
from time import sleep
import requests.exceptions
import requests{#
#}{% endif %}{% from "macros.template" import for_type_list_of_full %}

{% if is_asyncio %}{#
#}{% for some_import in imports if some_import.path != file_import_path.path and some_import.path != None %}
{{ some_import.import_statement_from_file(file_import_path) }}{#
#}{% endfor %}{#
#}{% endif %}

__author__ = 'luckydonald'
__all__ = ["{% if is_asyncio %}AsyncBot{% else %}SyncBot{% endif %}", "Bot"]

logger = logging.getLogger(__name__)


class {% if is_asyncio %}AsyncBot{% else %}SyncBot{% endif %}(BotBase):
    def _load_info(self):
        """
        This functions stores the id and the username of the bot.
        Called by `.username` and `.id` properties.

        This function is synchronous.
        In fact, `AsyncBot` uses `SyncBot` to load those.
        :return:
        """
        {% if is_asyncio %}
        from .syncrounous import SyncBot
        bot = SyncBot(api_key=self.api_key, return_python_objects=True)
        myself = bot.get_me()
        self._me = myself{#
        #}{% else %}
        if self.return_python_objects:
            self._me = myself
        else:
            from ..api_types.receivable.peer import User
            self._me = User.from_array(myself["result"])
        # end if{#
        #}{% endif %}
    # end def

    {% if is_asyncio %}async {% endif %}def do(self, command, files=None, use_long_polling=False, request_timeout=None, **query):
        """
        Send a request to the api.

        If the bot is set to return the json objects, it will look like this:

        ```json
        {
            "ok": bool,
            "result": {...},
            # optionally present:
            "description": "human-readable description of the result",
            "error_code": int
        }
        ```

        :param command: The Url command parameter
        :type  command: str

        :param request_timeout: When the request should time out. Default: `None`
        :type  request_timeout: int

        :param files: if it needs to send files.

        :param use_long_polling: if it should use long polling. Default: `False`
                                (see http://docs.python-requests.org/en/latest/api/#requests.Response.iter_content)
        :type  use_long_polling: bool

        :param query: all the other `**kwargs` will get json encoded.

        :return: The json response from the server, or, if `self.return_python_objects` is `True`, a parsed return type.
        :rtype:  DictObject.DictObject | pytgbot.api_types.receivable.Receivable
        """

        url, params = self._prepare_request(command, query){#
        #}{% if is_asyncio %}
        logger.debug('Sending async request to url {url!r} with params: {params!r}'.format(url=url, params=params))
        async with httpx.AsyncClient(
            verify=True,  # No self signed certificates. Telegram should be trustworthy anyway...
        ) as client:
            if use_long_polling:
                method = client.stream
            else:
                method = client.request
            # end if
            r = await method(
                'POST',
                url=url, params=params, files=files,
                timeout=request_timeout
            )
        # end with{#
        #}{% else %}
        r = requests.post(
            url,
            params=params,
            files=files,
            stream=use_long_polling,
            verify=True,  # No self signed certificates. Telegram should be trustworthy anyway...
            timeout=request_timeout
        ){#
        #}{% endif %}

        json = r.json()
        return self._postprocess_request(r.request, response=r, json=json)
    # end def do

    {% if is_asyncio %}async {% endif %}def _do_fileupload(self, file_param_name, value, _command=None, **kwargs):
        """
        :param file_param_name: For what field the file should be uploaded.
        :type  file_param_name: str

        :param value: File to send. You can either pass a file_id as String to resend a file
                      file that is already on the Telegram servers, or upload a new file,
                      specifying the file path as :class:`pytgbot.api_types.sendable.files.InputFile`.
        :type  value: pytgbot.api_types.sendable.files.InputFile | str

        :param _command: Overwrite the sended command.
                         Default is to convert `file_param_name` to camel case (`"voice_note"` -> `"sendVoiceNote"`)

        :param kwargs: will get json encoded.

        :return: The json response from the server, or, if `self.return_python_objects` is `True`, a parsed return type.
        :rtype:  DictObject.DictObject | pytgbot.api_types.receivable.Receivable

        :raises TgApiTypeError, TgApiParseException, TgApiServerException: Everything from :meth:`Bot.do`, and :class:`TgApiTypeError`
        """

        if isinstance(value, str):
            kwargs[file_param_name] = str(value)
        elif isinstance(value, unicode_type):
            kwargs[file_param_name] = n(value)
        elif isinstance(value, InputFile):
            kwargs["files"] = value.get_request_files(file_param_name)
        else:
            raise TgApiTypeError("Parameter {key} is not type (str, {text_type}, {input_file_type}), but type {type}".format(
                key=file_param_name, type=type(value), input_file_type=InputFile, text_type=unicode_type))
        # end if
        if not _command:
            # command as camelCase  # "voice_note" -> "sendVoiceNote"  # https://stackoverflow.com/a/10984923/3423324
            command = re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), "send_" + file_param_name)
        else:
            command = _command
        # end def
        return {% if is_asyncio %}await {% endif %}self.do(command, **kwargs)
    # end def _do_fileupload

    {% if is_asyncio %}async {% endif %}def send_msg(self, *args, **kwargs):
        """ alias to :func:`send_message` """
        return {% if is_asyncio %}await {% endif %}self.send_message(*args, **kwargs)
    # end def send_msg

    # start of generated functions
    {% for function in functions %}{#
    #}{% if function.name == 'get_updates' %}{#
    #}{% if is_asyncio %}
    async def {{ function.name }}(self{% for variable in function.variables %}, {{ {'timeout': 'poll_timeout'}.get(variable.name, variable.name) }}: {{ variable.typehint_optional }}{% if variable.optional %} = {{ variable.default if variable.default else {'limit': 100, }.get(variable.name, 'None') }}{% endif %}{% endfor %}, request_timeout: Optional[int] = None, delta: timedelta = timedelta(milliseconds=100), error_as_empty: bool = False) -> {{ function.returns.typehint_optional }}:{#
    #}{% else %}
    def {{ function.name }}(self{% for variable in function.variables %}, {{ {'timeout': 'poll_timeout'}.get(variable.name, variable.name) }}{% if variable.optional %}={{ variable.default if variable.default else {'limit': 100, }.get(variable.name, 'None') }}{% endif %}{% endfor %}, request_timeout=None, delta=timedelta(milliseconds=100), error_as_empty=False):{#
    #}{% endif %}
        """
        Use this method to receive incoming updates using long polling (See https://en.wikipedia.org/wiki/Push_technology#Long_polling).
        An Array of Update objects is returned.

        You can choose to set `error_as_empty` to `True` or `False`.
        If `error_as_empty` is set to `True`, it will log that exception as warning, and fake an empty result,
        intended for use in for loops. In case of such error (and only in such case) it contains an "exception" field.
        Ìt will look like this: `{"result": [], "exception": e}`
        This is useful if you want to use a for loop, but ignore Network related burps.

        If `error_as_empty` is set to `False` however, all `requests.RequestException` exceptions are normally raised.

        :keyword offset: (Optional)	Identifier of the first update to be returned.
                 Must be greater by one than the highest among the identifiers of previously received updates.
                 By default, updates starting with the earliest unconfirmed update are returned.
                 An update is considered confirmed as soon as :func:`get_updates` is called with
                 an offset higher than its `update_id`.
        :type offset: int

        :param limit: Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100
        :type  limit: int

        :param poll_timeout: Timeout in seconds for long polling, e.g. how long we want to wait maximum.
                               Defaults to 0, i.e. usual short polling.
        :type  poll_timeout: int

        :param allowed_updates: List the types of updates you want your bot to receive.
                                  For example, specify [“message”, “edited_channel_post”, “callback_query”] to only
                                  receive updates of these types. See Update for a complete list of available update
                                  types. Specify an empty list to receive all updates regardless of type (default).
                                  If not specified, the previous setting will be used. Please note that this parameter
                                  doesn't affect updates created before the call to the get_updates,
                                  so unwanted updates may be received for a short period of time.
        :type allowed_updates: list of str


        :param request_timeout: Timeout of the request. Not the long polling server side timeout.
                                  If not specified, it is set to `poll_timeout`+2.
        :type request_timeout: int

        :param delta: Wait minimal 'delta' seconds, between requests. Useful in a loop.
        :type  delta: datetime.

        :param error_as_empty: If errors which subclasses `requests.RequestException` will be logged but not raised.
                 Instead the returned DictObject will contain an "exception" field containing the exception occured,
                 the "result" field will be an empty list `[]`. Defaults to `False`.
        :type  error_as_empty: bool


        Returns:

        :return: An Array of Update objects is returned,
                 or an empty array if there was an requests.RequestException and error_as_empty is set to True.
        :rtype: list of pytgbot.api_types.receivable.updates.Update
        """
        assert(offset is None or isinstance(offset, int))
        assert(limit is None or isinstance(limit, int))
        assert(poll_timeout is None or isinstance(poll_timeout, int))
        assert(allowed_updates is None or isinstance(allowed_updates, list))
        if poll_timeout and not request_timeout is None:
            request_timeout = poll_timeout + 2
        # end if

        if delta.total_seconds() > poll_timeout:
            now = datetime.now()
            if self._last_update - now < delta:
                wait = ((now - self._last_update) - delta).total_seconds()  # can be 0.2
                wait = 0 if wait < 0 else wait
                if wait != 0:
                    logger.debug("Sleeping {i} seconds.".format(i=wait))
                # end if
                {% if is_asyncio %}await {% endif %}sleep(wait)
            # end if
        # end if
        self._last_update = datetime.now()
        use_long_polling = poll_timeout != 0
        try:
            result = {% if is_asyncio %}await {% endif %}self.do(
                "getUpdates", offset=offset, limit=limit, timeout=poll_timeout, allowed_updates=allowed_updates,
                use_long_polling=use_long_polling, request_timeout=request_timeout
            )
            return self._get_updates__process_result(result)
        except ({% if is_asyncio %}httpx.exceptions.HTTPError{% else %}requests.exceptions.RequestException{% endif %}, TgApiException) as e:
            if error_as_empty:
                if not isinstance(e, {% if is_asyncio %}httpx.exceptions.TimeoutException{% else %}requests.exceptions.Timeout{% endif %}) or not use_long_polling:
                    logger.warning(
                        "Network related error happened in get_updates(), but will be ignored: " + str(e),
                        exc_info=True
                    )
                # end if
                self._last_update = datetime.now()
                return DictObject(result=[], exception=e)
            else:
                raise
            # end if
        # end try
    # end def get_updates{#
    #}{% else %}{#
    #}{% if is_asyncio %}
    async def {{ function.name }}(self{% for variable in function.variables %}, {{ variable.name }}: {{ variable.typehint_optional }}{% if variable.optional %} = {{ variable.default if variable.default else 'None' }}{% endif %}{% endfor %}) -> {{ function.returns.typehint_optional }}:{#
    #}{% else %}
    def {{ function.name }}(self{% for variable in function.variables %}, {{ variable.name }}{% if variable.optional %}={{ variable.default if variable.default else 'None' }}{% endif %}{% endfor %}):{#
    #}{% endif %}
        """
        {{ (function.description if function.description else function.name) | indent(8) }}

        {{function.link}}


        {% if function.parameters %}
        Parameters:
        {% for param in function.parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
        {% endfor %}
        {% endif %}
        {% if function.keywords -%}
        Optional keyword parameters:
        {% for keyword in function.keywords %}
        :param {{ keyword.name }}: {{ keyword.description }}
        :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
        {% endfor %}
        {% endif -%}


        Returns:

        :return: {{ function.returns.description }}
        :rtype:  {{ for_type_list_of_full(function.returns) }}
        """
        result = {% if is_asyncio %}await {% endif %}self._{{ function.name }}__make_request({% for variable in function.variables %}{{ variable.name }}={{ variable.name }}{% if not loop.last %}, {% endif %}{% endfor %})
        return self._{{ function.name }}__process_result(result)
    # end def {{ function.name }}{#
    #}{% endif %}{# <- name of function #}{#
    #}{% if not loop.last %}{# extra linebreak #}
    {% endif %}{#
    #}{% endfor %}
    # end of generated functions
# end class Bot

# allow importing the bot as `pytgbot.bot.{% if is_asyncio %}a{% endif %}syncrounous.Bot`.
Bot = {% if is_asyncio %}AsyncBot{% else %}SyncBot{% endif %}
