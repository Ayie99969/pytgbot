# -*- coding: utf-8 -*-
from luckydonaldUtils.logger import logging
from luckydonaldUtils.encoding import unicode_type, to_unicode as u
from luckydonaldUtils.exceptions import assert_type_or_raise
from pytgbot.api_types.receivable.updates import Message as PytgbotApiMessage
from pytgbot.exceptions import TgApiServerException
from pytgbot.bot import Bot as PytgbotApiBot
from abc import abstractmethod{#
#}{% from "macros.template" import for_type_list_of_full, for_args_none, types_as_tuple %}{#
#}{% from "macros.template" import set_data_array_element, for_type, for_args_format_repr, for_args_keys %}{#
#}{% from "macros.template" import set_array, set_array_element %}


__author__ = "luckydonald"
logger = logging.getLogger(__name__)


# noinspection PyPep8Naming
class DEFAULT_MESSAGE_ID(object):
    """
    Used for reply_id.
    """
    pass
# end class


class SendableMessageBase(object):
    def _apply_update_receiver(self, receiver, reply_id):
        """
        Updates `self.receiver` and/or `self.reply_id` if they still contain the default value.
        :param receiver: The receiver `chat_id` to use.
                         Either `self.receiver`, if set, e.g. when instancing `TextMessage(receiver=10001231231, ...)`,
                         or the `chat.id` of the update context, being the id of groups or the user's `from_peer.id` in private messages.
        :type  receiver: None | str|unicode | int


        :param reply_id: Reply to that `message_id` in the chat we send to.
                         Either `self.reply_id`, if set, e.g. when instancing `TextMessage(reply_id=123123, ...)`,
                         or the `message_id` of the update which triggered the bot's functions.
        :type  reply_id: DEFAULT_MESSAGE_ID | int | None
        """
        if self.receiver is None:
            self.receiver = receiver
        # end if
        if self.reply_id is DEFAULT_MESSAGE_ID:
            self.reply_id = reply_id
        # end if
    # end def

    @abstractmethod
    def send(self, sender: PytgbotApiBot) -> PytgbotApiMessage:
        try:
            return self.actual_send(sender)
        except TgApiServerException as e:
            if e.error_code == 400 and e.description.startswith('bad request') and 'reply message not found' in e.description:
                logger.debug('Trying to resend without reply_to.')
                return self.actual_send(sender, ignore_reply=True)
            # end if
            raise e
        # end try
    # end def

    def actual_send(self, sender: PytgbotApiBot, *, ignore_reply: bool = False) -> PytgbotApiMessage:
        raise NotImplementedError("Overwrite this function.")
    # end def
# end def

{% for clazz in clazzes %}
class {{ clazz.clazz }}(SendableMessageBase):
    """{% macro description() %}
    {{ clazz.description|indent(8) }}

    {{clazz.link}}

    {% if clazz.parameters %}
    Parameters:{#
    #}{% for param in clazz.parameters %}
    :param {{ param.name }}: {{ param.description }}
    :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
    {% endfor %}{#
    #}{% endif %}{#
    #}{% if clazz.keywords %}
    Optional keyword parameters:

    {#
    #}{% for keyword in clazz.keywords %}
    :param {{ keyword.name }}: {{ keyword.description }}
    :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
    {% endfor %}{#
    #}{% endif %}{#
    #}{% endmacro %}{{ description() }}{#
    #}"""

    def __init__(self, {{ for_args_none(clazz.variables) }}):
        """
        {{ description() | indent }}
        """
        super({{ clazz.clazz }}, self).__init__()

        {% macro imports() %}{#
        #}{%- if clazz.imports %}
        {% for import in clazz.imports -%}
        from {{ import.path }} import {{ import.name }}
        {% endfor -%}
        {% endif -%}
        {%- endmacro -%}{{ imports() }}
        {% for variable in clazz.variables -%}
        {% if variable.optional %}
        assert_type_or_raise({{ variable.name }}, None, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif -%}
        {%- else %}
        assert_type_or_raise({{ variable.name }}, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif %}
        {%- endif -%}
        self.{{ variable.name }} = {{ variable.name }}
        {%- if not loop.last %}
        {% endif -%}
        {% endfor %}
        self._next_msg = None
    {# force line tabs -#}
    # end def __init__

    def actual_send(self, sender: PytgbotApiBot, *, ignore_reply: bool = False) -> PytgbotApiMessage:
        """
        Send the message via pytgbot.

        :param sender: The bot instance to send with.
        :type  sender: pytgbot.bot.Bot

        :param ignore_reply: If we should not include the the `reply_to` parameter, because that already failed.
        :type  ignore_reply: bool

        :rtype: PytgbotApiMessage
        """
        return sender.{{ clazz.clazz }}(
            # receiver, self.media, disable_notification=self.disable_notification, reply_to_message_id=reply_id
            {%- for variable in clazz.variables %}{{ variable.pytg_name }}=self.{{ variable.name }}{% if not loop.last %}, {% endif -%}{%- endfor %}
        )
    # end def send

    def to_array(self):
        """
        Serializes this {{ clazz.clazz }} to a dictionary.

        :return: dictionary representation of this object.
        :rtype: dict
        """
        array = super({{ clazz.name_teleflask_message }}, self).to_array()
        {# fresh line -#}
        {% for variable in clazz.variables -%}
        {%- if variable.optional %}if self.{{ variable.name }} is not None:
            {{ set_array(variable)|indent(12) }}
        {% else -%}
        {{ set_array(variable)|indent(8) }}
        {% endif -%}
        {% endfor -%}
        return array
    # end def to_array

    @staticmethod
    def validate_array(array):
        """
        Builds a new array with valid values for the {{ clazz.clazz }} constructor.

        :return: new array with valid values
        :rtype: dict
        """
        assert_type_or_raise(array, dict, parameter_name="array")
        {#- strip linebreak after #}
        {{- imports() -}}
        {#- does strip before #}
        {#- this will be a new line #}
        data = SendableMessageBase.validate_array(array)
        {% for variable in clazz.variables -%}
        {%- if variable.types|length == 1 -%}
        {{- set_data_array_element(variable, variable.types[0], clazz.name_teleflask_message, variable.optional) -}}
        {% else -%}
        {%- if variable.optional -%}
        if array.get('{{ variable.api_name }}') is None:
            data['{{ variable.name }}'] = None
        {% endif -%}
        {%- for var_type in variable.types -%}
        {%- if not loop.first or variable.optional %}el{% endif %}if isinstance(array.get('{{ variable.api_name }}'), {{ var_type.string }}):
            {{ set_data_array_element(variable, var_type, clazz.clazz, False) -}}
        {%- endfor -%}
        else:
            raise TypeError('Unknown type, must be one of {{ for_type(variable) }}{% if variable.optional %} or None{% endif %}.')
        # end if
        {% endif -%}
        {%- endfor -%}{# remove empty line #}
        return data
    # end def validate_array

    @staticmethod
    def from_array(array):
        """
        Deserialize a new {{ clazz.clazz }} from a given dictionary.

        :return: new {{ clazz.clazz }} instance.
        :rtype: {{ clazz.clazz }}
        """
        if not array:  # None or {}
            return None
        # end if

        data = {{ clazz.clazz }}.validate_array(array)
        {% if not is_sendable -%}
        return {{ clazz.clazz }}(**data){% else -%}
        instance = {{ clazz.clazz }}(**data)
        return instance{% endif %}
    # end def from_array

    def __str__(self):
        """
        Implements `str({{ clazz.clazz|lower }}_instance)`
        """
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __str__

    def __repr__(self):
        """
        Implements `repr({{ clazz.clazz|lower }}_instance)`
        """
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __repr__

    def __contains__(self, key):
        """
        Implements `"key" in {{ clazz.clazz|lower }}_instance`
        """
        return (
            key in [{{ for_args_keys(clazz.variables) }}]
            and hasattr(self, key)
            and bool(getattr(self, key, None))
        )
    # end def __contains__
# end class {{ clazz.clazz }}
{% endfor %}
